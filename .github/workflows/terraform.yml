# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#

name: 'Terraform CI/CD'

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform JOB'
    runs-on: ubuntu-latest
    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Include backend configuration
    - name: Setup Terraform - Include backend configuration
      run: |
        echo 'terraform {' > backend.tf
        echo '  backend "remote" {' >> backend.tf
        echo '    organization = "'${{ vars.TF_ORGANIZATION }}'"' >> backend.tf
        echo '    workspaces {' >> backend.tf
        echo '      name = "'${{ vars.TF_WORKSPACE }}'"' >> backend.tf
        echo '    }' >> backend.tf
        echo '  }' >> backend.tf
        echo '}' >> backend.tf
    
    # Append values to terraform.tfvars file
    - name: Setup Terraform - Append values to terraform.tfvars file
      run: |
        echo ' ' >> terraform.tfvars
        echo '#OCI values generated' >> terraform.tfvars
        echo 'tenancy_ocid     = "'${{ vars.TF_VAR_TENANCY_OCID }}'"' >> terraform.tfvars
        echo 'user_ocid        = "'${{ vars.TF_VAR_user_ocid }}'"' >> terraform.tfvars
        echo 'fingerprint      = "'${{ vars.TF_VAR_fingerprint }}'"' >> terraform.tfvars
        echo 'region           = "'${{ vars.TF_VAR_region }}'"' >> terraform.tfvars
        echo 'private_key_path = "privatekey.pem"' >> terraform.tfvars
        terraform fmt terraform.tfvars
        cat terraform.tfvars
    
    # Generate privatekey.pem file with secret TF_VAR_private_key_value
    - name: Setup Terraform - Generate privatekey.pem file
      run: |
        cat <<EOF >privatekey.pem
        ${{ secrets.TF_VAR_private_key_value }}
        EOF
    
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform - Install and configure Terraform CLI
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

    # On push to "main", build or change infrastructure according to Terraform configuration files
    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
